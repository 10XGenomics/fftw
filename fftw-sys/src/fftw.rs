/* automatically generated by rust-bindgen */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize , concat ! (
               "Size of: " , stringify ! ( _IO_FILE ) ));
    assert_eq! (::std::mem::align_of::<_IO_FILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_FILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_backup_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _markers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _chain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _fileno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as
                usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _old_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _cur_column ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const
                _ as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _vtable_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as
                usize } , 131usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _shortbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as
                usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as
                usize } , 196usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _unused2 ) ));
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _IO_marker ) ));
    assert_eq! (::std::mem::align_of::<_IO_marker>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _pos ) ));
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum fftw_r2r_kind_do_not_use_me {
    FFTW_R2HC = 0,
    FFTW_HC2R = 1,
    FFTW_DHT = 2,
    FFTW_REDFT00 = 3,
    FFTW_REDFT01 = 4,
    FFTW_REDFT10 = 5,
    FFTW_REDFT11 = 6,
    FFTW_RODFT00 = 7,
    FFTW_RODFT01 = 8,
    FFTW_RODFT10 = 9,
    FFTW_RODFT11 = 10,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fftw_iodim_do_not_use_me {
    pub n: ::std::os::raw::c_int,
    pub is: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fftw_iodim_do_not_use_me() {
    assert_eq!(::std::mem::size_of::<fftw_iodim_do_not_use_me>() , 12usize ,
               concat ! (
               "Size of: " , stringify ! ( fftw_iodim_do_not_use_me ) ));
    assert_eq! (::std::mem::align_of::<fftw_iodim_do_not_use_me>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( fftw_iodim_do_not_use_me ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fftw_iodim_do_not_use_me ) ) . n as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                fftw_iodim_do_not_use_me ) , "::" , stringify ! ( n ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fftw_iodim_do_not_use_me ) ) . is as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                fftw_iodim_do_not_use_me ) , "::" , stringify ! ( is ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fftw_iodim_do_not_use_me ) ) . os as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                fftw_iodim_do_not_use_me ) , "::" , stringify ! ( os ) ));
}
impl Clone for fftw_iodim_do_not_use_me {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fftw_iodim64_do_not_use_me {
    pub n: isize,
    pub is: isize,
    pub os: isize,
}
#[test]
fn bindgen_test_layout_fftw_iodim64_do_not_use_me() {
    assert_eq!(::std::mem::size_of::<fftw_iodim64_do_not_use_me>() , 24usize ,
               concat ! (
               "Size of: " , stringify ! ( fftw_iodim64_do_not_use_me ) ));
    assert_eq! (::std::mem::align_of::<fftw_iodim64_do_not_use_me>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( fftw_iodim64_do_not_use_me )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fftw_iodim64_do_not_use_me ) ) . n as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                fftw_iodim64_do_not_use_me ) , "::" , stringify ! ( n ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fftw_iodim64_do_not_use_me ) ) . is as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                fftw_iodim64_do_not_use_me ) , "::" , stringify ! ( is ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fftw_iodim64_do_not_use_me ) ) . os as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                fftw_iodim64_do_not_use_me ) , "::" , stringify ! ( os ) ));
}
impl Clone for fftw_iodim64_do_not_use_me {
    fn clone(&self) -> Self { *self }
}
pub type fftw_write_char_func_do_not_use_me =
    ::std::option::Option<unsafe extern "C" fn(c: ::std::os::raw::c_char,
                                               arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type fftw_read_char_func_do_not_use_me =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type fftw_complex = [f64; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftw_plan_s([u8; 0]);
pub type fftw_plan = *mut fftw_plan_s;
pub type fftw_iodim = fftw_iodim_do_not_use_me;
pub type fftw_iodim64 = fftw_iodim64_do_not_use_me;
pub use self::fftw_r2r_kind_do_not_use_me as fftw_r2r_kind;
pub type fftw_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftw_read_char_func = fftw_read_char_func_do_not_use_me;
extern "C" {
    pub fn fftw_execute(p: fftw_plan);
}
extern "C" {
    pub fn fftw_plan_dft(rank: ::std::os::raw::c_int,
                         n: *const ::std::os::raw::c_int,
                         in_: *mut fftw_complex, out: *mut fftw_complex,
                         sign: ::std::os::raw::c_int,
                         flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_1d(n: ::std::os::raw::c_int, in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_2d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int, in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_3d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            n2: ::std::os::raw::c_int, in_: *mut fftw_complex,
                            out: *mut fftw_complex,
                            sign: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_many_dft(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              howmany: ::std::os::raw::c_int,
                              in_: *mut fftw_complex,
                              inembed: *const ::std::os::raw::c_int,
                              istride: ::std::os::raw::c_int,
                              idist: ::std::os::raw::c_int,
                              out: *mut fftw_complex,
                              onembed: *const ::std::os::raw::c_int,
                              ostride: ::std::os::raw::c_int,
                              odist: ::std::os::raw::c_int,
                              sign: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_dft(rank: ::std::os::raw::c_int,
                              dims: *const fftw_iodim,
                              howmany_rank: ::std::os::raw::c_int,
                              howmany_dims: *const fftw_iodim,
                              in_: *mut fftw_complex, out: *mut fftw_complex,
                              sign: ::std::os::raw::c_int,
                              flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_split_dft(rank: ::std::os::raw::c_int,
                                    dims: *const fftw_iodim,
                                    howmany_rank: ::std::os::raw::c_int,
                                    howmany_dims: *const fftw_iodim,
                                    ri: *mut f64, ii: *mut f64, ro: *mut f64,
                                    io: *mut f64,
                                    flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_dft(rank: ::std::os::raw::c_int,
                                dims: *const fftw_iodim64,
                                howmany_rank: ::std::os::raw::c_int,
                                howmany_dims: *const fftw_iodim64,
                                in_: *mut fftw_complex,
                                out: *mut fftw_complex,
                                sign: ::std::os::raw::c_int,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_split_dft(rank: ::std::os::raw::c_int,
                                      dims: *const fftw_iodim64,
                                      howmany_rank: ::std::os::raw::c_int,
                                      howmany_dims: *const fftw_iodim64,
                                      ri: *mut f64, ii: *mut f64,
                                      ro: *mut f64, io: *mut f64,
                                      flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_execute_dft(p: fftw_plan, in_: *mut fftw_complex,
                            out: *mut fftw_complex);
}
extern "C" {
    pub fn fftw_execute_split_dft(p: fftw_plan, ri: *mut f64, ii: *mut f64,
                                  ro: *mut f64, io: *mut f64);
}
extern "C" {
    pub fn fftw_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                  n: *const ::std::os::raw::c_int,
                                  howmany: ::std::os::raw::c_int,
                                  in_: *mut f64,
                                  inembed: *const ::std::os::raw::c_int,
                                  istride: ::std::os::raw::c_int,
                                  idist: ::std::os::raw::c_int,
                                  out: *mut fftw_complex,
                                  onembed: *const ::std::os::raw::c_int,
                                  ostride: ::std::os::raw::c_int,
                                  odist: ::std::os::raw::c_int,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_r2c(rank: ::std::os::raw::c_int,
                             n: *const ::std::os::raw::c_int, in_: *mut f64,
                             out: *mut fftw_complex,
                             flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_r2c_1d(n: ::std::os::raw::c_int, in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int, in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                n2: ::std::os::raw::c_int, in_: *mut f64,
                                out: *mut fftw_complex,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                  n: *const ::std::os::raw::c_int,
                                  howmany: ::std::os::raw::c_int,
                                  in_: *mut fftw_complex,
                                  inembed: *const ::std::os::raw::c_int,
                                  istride: ::std::os::raw::c_int,
                                  idist: ::std::os::raw::c_int, out: *mut f64,
                                  onembed: *const ::std::os::raw::c_int,
                                  ostride: ::std::os::raw::c_int,
                                  odist: ::std::os::raw::c_int,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_c2r(rank: ::std::os::raw::c_int,
                             n: *const ::std::os::raw::c_int,
                             in_: *mut fftw_complex, out: *mut f64,
                             flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                in_: *mut fftw_complex, out: *mut f64,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                in_: *mut fftw_complex, out: *mut f64,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                n1: ::std::os::raw::c_int,
                                n2: ::std::os::raw::c_int,
                                in_: *mut fftw_complex, out: *mut f64,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                  dims: *const fftw_iodim,
                                  howmany_rank: ::std::os::raw::c_int,
                                  howmany_dims: *const fftw_iodim,
                                  in_: *mut f64, out: *mut fftw_complex,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                  dims: *const fftw_iodim,
                                  howmany_rank: ::std::os::raw::c_int,
                                  howmany_dims: *const fftw_iodim,
                                  in_: *mut fftw_complex, out: *mut f64,
                                  flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_split_dft_r2c(rank: ::std::os::raw::c_int,
                                        dims: *const fftw_iodim,
                                        howmany_rank: ::std::os::raw::c_int,
                                        howmany_dims: *const fftw_iodim,
                                        in_: *mut f64, ro: *mut f64,
                                        io: *mut f64,
                                        flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_split_dft_c2r(rank: ::std::os::raw::c_int,
                                        dims: *const fftw_iodim,
                                        howmany_rank: ::std::os::raw::c_int,
                                        howmany_dims: *const fftw_iodim,
                                        ri: *mut f64, ii: *mut f64,
                                        out: *mut f64,
                                        flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_dft_r2c(rank: ::std::os::raw::c_int,
                                    dims: *const fftw_iodim64,
                                    howmany_rank: ::std::os::raw::c_int,
                                    howmany_dims: *const fftw_iodim64,
                                    in_: *mut f64, out: *mut fftw_complex,
                                    flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_dft_c2r(rank: ::std::os::raw::c_int,
                                    dims: *const fftw_iodim64,
                                    howmany_rank: ::std::os::raw::c_int,
                                    howmany_dims: *const fftw_iodim64,
                                    in_: *mut fftw_complex, out: *mut f64,
                                    flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_split_dft_r2c(rank: ::std::os::raw::c_int,
                                          dims: *const fftw_iodim64,
                                          howmany_rank: ::std::os::raw::c_int,
                                          howmany_dims: *const fftw_iodim64,
                                          in_: *mut f64, ro: *mut f64,
                                          io: *mut f64,
                                          flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_split_dft_c2r(rank: ::std::os::raw::c_int,
                                          dims: *const fftw_iodim64,
                                          howmany_rank: ::std::os::raw::c_int,
                                          howmany_dims: *const fftw_iodim64,
                                          ri: *mut f64, ii: *mut f64,
                                          out: *mut f64,
                                          flags: ::std::os::raw::c_uint)
     -> fftw_plan;
}
extern "C" {
    pub fn fftw_execute_dft_r2c(p: fftw_plan, in_: *mut f64,
                                out: *mut fftw_complex);
}
extern "C" {
    pub fn fftw_execute_dft_c2r(p: fftw_plan, in_: *mut fftw_complex,
                                out: *mut f64);
}
extern "C" {
    pub fn fftw_execute_split_dft_r2c(p: fftw_plan, in_: *mut f64,
                                      ro: *mut f64, io: *mut f64);
}
extern "C" {
    pub fn fftw_execute_split_dft_c2r(p: fftw_plan, ri: *mut f64,
                                      ii: *mut f64, out: *mut f64);
}
extern "C" {
    pub fn fftw_plan_many_r2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              howmany: ::std::os::raw::c_int, in_: *mut f64,
                              inembed: *const ::std::os::raw::c_int,
                              istride: ::std::os::raw::c_int,
                              idist: ::std::os::raw::c_int, out: *mut f64,
                              onembed: *const ::std::os::raw::c_int,
                              ostride: ::std::os::raw::c_int,
                              odist: ::std::os::raw::c_int,
                              kind: *const fftw_r2r_kind,
                              flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_r2r(rank: ::std::os::raw::c_int,
                         n: *const ::std::os::raw::c_int, in_: *mut f64,
                         out: *mut f64, kind: *const fftw_r2r_kind,
                         flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_r2r_1d(n: ::std::os::raw::c_int, in_: *mut f64,
                            out: *mut f64, kind: fftw_r2r_kind,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_r2r_2d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int, in_: *mut f64,
                            out: *mut f64, kind0: fftw_r2r_kind,
                            kind1: fftw_r2r_kind,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_r2r_3d(n0: ::std::os::raw::c_int,
                            n1: ::std::os::raw::c_int,
                            n2: ::std::os::raw::c_int, in_: *mut f64,
                            out: *mut f64, kind0: fftw_r2r_kind,
                            kind1: fftw_r2r_kind, kind2: fftw_r2r_kind,
                            flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru_r2r(rank: ::std::os::raw::c_int,
                              dims: *const fftw_iodim,
                              howmany_rank: ::std::os::raw::c_int,
                              howmany_dims: *const fftw_iodim, in_: *mut f64,
                              out: *mut f64, kind: *const fftw_r2r_kind,
                              flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_plan_guru64_r2r(rank: ::std::os::raw::c_int,
                                dims: *const fftw_iodim64,
                                howmany_rank: ::std::os::raw::c_int,
                                howmany_dims: *const fftw_iodim64,
                                in_: *mut f64, out: *mut f64,
                                kind: *const fftw_r2r_kind,
                                flags: ::std::os::raw::c_uint) -> fftw_plan;
}
extern "C" {
    pub fn fftw_execute_r2r(p: fftw_plan, in_: *mut f64, out: *mut f64);
}
extern "C" {
    pub fn fftw_destroy_plan(p: fftw_plan);
}
extern "C" {
    pub fn fftw_forget_wisdom();
}
extern "C" {
    pub fn fftw_cleanup();
}
extern "C" {
    pub fn fftw_set_timelimit(t: f64);
}
extern "C" {
    pub fn fftw_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fftw_init_threads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_cleanup_threads();
}
extern "C" {
    pub fn fftw_make_planner_thread_safe();
}
extern "C" {
    pub fn fftw_export_wisdom_to_filename(filename:
                                              *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_export_wisdom_to_file(output_file: *mut FILE);
}
extern "C" {
    pub fn fftw_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fftw_export_wisdom(write_char: fftw_write_char_func,
                              data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fftw_import_system_wisdom() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_import_wisdom_from_filename(filename:
                                                *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_import_wisdom_from_file(input_file: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_import_wisdom_from_string(input_string:
                                              *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_import_wisdom(read_char: fftw_read_char_func,
                              data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftw_fprint_plan(p: fftw_plan, output_file: *mut FILE);
}
extern "C" {
    pub fn fftw_print_plan(p: fftw_plan);
}
extern "C" {
    pub fn fftw_sprint_plan(p: fftw_plan) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fftw_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fftw_alloc_real(n: usize) -> *mut f64;
}
extern "C" {
    pub fn fftw_alloc_complex(n: usize) -> *mut fftw_complex;
}
extern "C" {
    pub fn fftw_free(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fftw_flops(p: fftw_plan, add: *mut f64, mul: *mut f64,
                      fmas: *mut f64);
}
extern "C" {
    pub fn fftw_estimate_cost(p: fftw_plan) -> f64;
}
extern "C" {
    pub fn fftw_cost(p: fftw_plan) -> f64;
}
extern "C" {
    pub fn fftw_alignment_of(p: *mut f64) -> ::std::os::raw::c_int;
}
pub type fftwf_complex = [f32; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftwf_plan_s([u8; 0]);
pub type fftwf_plan = *mut fftwf_plan_s;
pub type fftwf_iodim = fftw_iodim_do_not_use_me;
pub type fftwf_iodim64 = fftw_iodim64_do_not_use_me;
pub use self::fftw_r2r_kind_do_not_use_me as fftwf_r2r_kind;
pub type fftwf_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftwf_read_char_func = fftw_read_char_func_do_not_use_me;
extern "C" {
    pub fn fftwf_execute(p: fftwf_plan);
}
extern "C" {
    pub fn fftwf_plan_dft(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut fftwf_complex, out: *mut fftwf_complex,
                          sign: ::std::os::raw::c_int,
                          flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_1d(n: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex, out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex, out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut fftwf_complex, out: *mut fftwf_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_many_dft(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int,
                               in_: *mut fftwf_complex,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut fftwf_complex,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_dft(rank: ::std::os::raw::c_int,
                               dims: *const fftwf_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwf_iodim,
                               in_: *mut fftwf_complex,
                               out: *mut fftwf_complex,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_split_dft(rank: ::std::os::raw::c_int,
                                     dims: *const fftwf_iodim,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwf_iodim,
                                     ri: *mut f32, ii: *mut f32, ro: *mut f32,
                                     io: *mut f32,
                                     flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_dft(rank: ::std::os::raw::c_int,
                                 dims: *const fftwf_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwf_iodim64,
                                 in_: *mut fftwf_complex,
                                 out: *mut fftwf_complex,
                                 sign: ::std::os::raw::c_int,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_split_dft(rank: ::std::os::raw::c_int,
                                       dims: *const fftwf_iodim64,
                                       howmany_rank: ::std::os::raw::c_int,
                                       howmany_dims: *const fftwf_iodim64,
                                       ri: *mut f32, ii: *mut f32,
                                       ro: *mut f32, io: *mut f32,
                                       flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_execute_dft(p: fftwf_plan, in_: *mut fftwf_complex,
                             out: *mut fftwf_complex);
}
extern "C" {
    pub fn fftwf_execute_split_dft(p: fftwf_plan, ri: *mut f32, ii: *mut f32,
                                   ro: *mut f32, io: *mut f32);
}
extern "C" {
    pub fn fftwf_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut f32,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut fftwf_complex,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_r2c(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int, in_: *mut f32,
                              out: *mut fftwf_complex,
                              flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_r2c_1d(n: ::std::os::raw::c_int, in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int, in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int, in_: *mut f32,
                                 out: *mut fftwf_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut fftwf_complex,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut f32,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_c2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut fftwf_complex, out: *mut f32,
                              flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex, out: *mut f32,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex, out: *mut f32,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut fftwf_complex, out: *mut f32,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                   dims: *const fftwf_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwf_iodim,
                                   in_: *mut f32, out: *mut fftwf_complex,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                   dims: *const fftwf_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwf_iodim,
                                   in_: *mut fftwf_complex, out: *mut f32,
                                   flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_split_dft_r2c(rank: ::std::os::raw::c_int,
                                         dims: *const fftwf_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwf_iodim,
                                         in_: *mut f32, ro: *mut f32,
                                         io: *mut f32,
                                         flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_split_dft_c2r(rank: ::std::os::raw::c_int,
                                         dims: *const fftwf_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwf_iodim,
                                         ri: *mut f32, ii: *mut f32,
                                         out: *mut f32,
                                         flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_dft_r2c(rank: ::std::os::raw::c_int,
                                     dims: *const fftwf_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwf_iodim64,
                                     in_: *mut f32, out: *mut fftwf_complex,
                                     flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_dft_c2r(rank: ::std::os::raw::c_int,
                                     dims: *const fftwf_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwf_iodim64,
                                     in_: *mut fftwf_complex, out: *mut f32,
                                     flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_split_dft_r2c(rank: ::std::os::raw::c_int,
                                           dims: *const fftwf_iodim64,
                                           howmany_rank:
                                               ::std::os::raw::c_int,
                                           howmany_dims: *const fftwf_iodim64,
                                           in_: *mut f32, ro: *mut f32,
                                           io: *mut f32,
                                           flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_split_dft_c2r(rank: ::std::os::raw::c_int,
                                           dims: *const fftwf_iodim64,
                                           howmany_rank:
                                               ::std::os::raw::c_int,
                                           howmany_dims: *const fftwf_iodim64,
                                           ri: *mut f32, ii: *mut f32,
                                           out: *mut f32,
                                           flags: ::std::os::raw::c_uint)
     -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_execute_dft_r2c(p: fftwf_plan, in_: *mut f32,
                                 out: *mut fftwf_complex);
}
extern "C" {
    pub fn fftwf_execute_dft_c2r(p: fftwf_plan, in_: *mut fftwf_complex,
                                 out: *mut f32);
}
extern "C" {
    pub fn fftwf_execute_split_dft_r2c(p: fftwf_plan, in_: *mut f32,
                                       ro: *mut f32, io: *mut f32);
}
extern "C" {
    pub fn fftwf_execute_split_dft_c2r(p: fftwf_plan, ri: *mut f32,
                                       ii: *mut f32, out: *mut f32);
}
extern "C" {
    pub fn fftwf_plan_many_r2r(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int, in_: *mut f32,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int, out: *mut f32,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               kind: *const fftwf_r2r_kind,
                               flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_r2r(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int, in_: *mut f32,
                          out: *mut f32, kind: *const fftwf_r2r_kind,
                          flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_r2r_1d(n: ::std::os::raw::c_int, in_: *mut f32,
                             out: *mut f32, kind: fftwf_r2r_kind,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_r2r_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int, in_: *mut f32,
                             out: *mut f32, kind0: fftwf_r2r_kind,
                             kind1: fftwf_r2r_kind,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_r2r_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int, in_: *mut f32,
                             out: *mut f32, kind0: fftwf_r2r_kind,
                             kind1: fftwf_r2r_kind, kind2: fftwf_r2r_kind,
                             flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru_r2r(rank: ::std::os::raw::c_int,
                               dims: *const fftwf_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwf_iodim,
                               in_: *mut f32, out: *mut f32,
                               kind: *const fftwf_r2r_kind,
                               flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_plan_guru64_r2r(rank: ::std::os::raw::c_int,
                                 dims: *const fftwf_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwf_iodim64,
                                 in_: *mut f32, out: *mut f32,
                                 kind: *const fftwf_r2r_kind,
                                 flags: ::std::os::raw::c_uint) -> fftwf_plan;
}
extern "C" {
    pub fn fftwf_execute_r2r(p: fftwf_plan, in_: *mut f32, out: *mut f32);
}
extern "C" {
    pub fn fftwf_destroy_plan(p: fftwf_plan);
}
extern "C" {
    pub fn fftwf_forget_wisdom();
}
extern "C" {
    pub fn fftwf_cleanup();
}
extern "C" {
    pub fn fftwf_set_timelimit(t: f64);
}
extern "C" {
    pub fn fftwf_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fftwf_init_threads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_cleanup_threads();
}
extern "C" {
    pub fn fftwf_make_planner_thread_safe();
}
extern "C" {
    pub fn fftwf_export_wisdom_to_filename(filename:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_export_wisdom_to_file(output_file: *mut FILE);
}
extern "C" {
    pub fn fftwf_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fftwf_export_wisdom(write_char: fftwf_write_char_func,
                               data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fftwf_import_system_wisdom() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_import_wisdom_from_filename(filename:
                                                 *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_import_wisdom_from_file(input_file: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_import_wisdom_from_string(input_string:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_import_wisdom(read_char: fftwf_read_char_func,
                               data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwf_fprint_plan(p: fftwf_plan, output_file: *mut FILE);
}
extern "C" {
    pub fn fftwf_print_plan(p: fftwf_plan);
}
extern "C" {
    pub fn fftwf_sprint_plan(p: fftwf_plan) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fftwf_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fftwf_alloc_real(n: usize) -> *mut f32;
}
extern "C" {
    pub fn fftwf_alloc_complex(n: usize) -> *mut fftwf_complex;
}
extern "C" {
    pub fn fftwf_free(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fftwf_flops(p: fftwf_plan, add: *mut f64, mul: *mut f64,
                       fmas: *mut f64);
}
extern "C" {
    pub fn fftwf_estimate_cost(p: fftwf_plan) -> f64;
}
extern "C" {
    pub fn fftwf_cost(p: fftwf_plan) -> f64;
}
extern "C" {
    pub fn fftwf_alignment_of(p: *mut f32) -> ::std::os::raw::c_int;
}
pub type fftwl_complex = [f64; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fftwl_plan_s([u8; 0]);
pub type fftwl_plan = *mut fftwl_plan_s;
pub type fftwl_iodim = fftw_iodim_do_not_use_me;
pub type fftwl_iodim64 = fftw_iodim64_do_not_use_me;
pub use self::fftw_r2r_kind_do_not_use_me as fftwl_r2r_kind;
pub type fftwl_write_char_func = fftw_write_char_func_do_not_use_me;
pub type fftwl_read_char_func = fftw_read_char_func_do_not_use_me;
extern "C" {
    pub fn fftwl_execute(p: fftwl_plan);
}
extern "C" {
    pub fn fftwl_plan_dft(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int,
                          in_: *mut fftwl_complex, out: *mut fftwl_complex,
                          sign: ::std::os::raw::c_int,
                          flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_1d(n: ::std::os::raw::c_int,
                             in_: *mut fftwl_complex, out: *mut fftwl_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             in_: *mut fftwl_complex, out: *mut fftwl_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int,
                             in_: *mut fftwl_complex, out: *mut fftwl_complex,
                             sign: ::std::os::raw::c_int,
                             flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_many_dft(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int,
                               in_: *mut fftwl_complex,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int,
                               out: *mut fftwl_complex,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_dft(rank: ::std::os::raw::c_int,
                               dims: *const fftwl_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwl_iodim,
                               in_: *mut fftwl_complex,
                               out: *mut fftwl_complex,
                               sign: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_split_dft(rank: ::std::os::raw::c_int,
                                     dims: *const fftwl_iodim,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwl_iodim,
                                     ri: *mut f64, ii: *mut f64, ro: *mut f64,
                                     io: *mut f64,
                                     flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_dft(rank: ::std::os::raw::c_int,
                                 dims: *const fftwl_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwl_iodim64,
                                 in_: *mut fftwl_complex,
                                 out: *mut fftwl_complex,
                                 sign: ::std::os::raw::c_int,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_split_dft(rank: ::std::os::raw::c_int,
                                       dims: *const fftwl_iodim64,
                                       howmany_rank: ::std::os::raw::c_int,
                                       howmany_dims: *const fftwl_iodim64,
                                       ri: *mut f64, ii: *mut f64,
                                       ro: *mut f64, io: *mut f64,
                                       flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_execute_dft(p: fftwl_plan, in_: *mut fftwl_complex,
                             out: *mut fftwl_complex);
}
extern "C" {
    pub fn fftwl_execute_split_dft(p: fftwl_plan, ri: *mut f64, ii: *mut f64,
                                   ro: *mut f64, io: *mut f64);
}
extern "C" {
    pub fn fftwl_plan_many_dft_r2c(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut f64,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut fftwl_complex,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_r2c(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int, in_: *mut f64,
                              out: *mut fftwl_complex,
                              flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_r2c_1d(n: ::std::os::raw::c_int, in_: *mut f64,
                                 out: *mut fftwl_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_r2c_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int, in_: *mut f64,
                                 out: *mut fftwl_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_r2c_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int, in_: *mut f64,
                                 out: *mut fftwl_complex,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_many_dft_c2r(rank: ::std::os::raw::c_int,
                                   n: *const ::std::os::raw::c_int,
                                   howmany: ::std::os::raw::c_int,
                                   in_: *mut fftwl_complex,
                                   inembed: *const ::std::os::raw::c_int,
                                   istride: ::std::os::raw::c_int,
                                   idist: ::std::os::raw::c_int,
                                   out: *mut f64,
                                   onembed: *const ::std::os::raw::c_int,
                                   ostride: ::std::os::raw::c_int,
                                   odist: ::std::os::raw::c_int,
                                   flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_c2r(rank: ::std::os::raw::c_int,
                              n: *const ::std::os::raw::c_int,
                              in_: *mut fftwl_complex, out: *mut f64,
                              flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_c2r_1d(n: ::std::os::raw::c_int,
                                 in_: *mut fftwl_complex, out: *mut f64,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_c2r_2d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 in_: *mut fftwl_complex, out: *mut f64,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_dft_c2r_3d(n0: ::std::os::raw::c_int,
                                 n1: ::std::os::raw::c_int,
                                 n2: ::std::os::raw::c_int,
                                 in_: *mut fftwl_complex, out: *mut f64,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_dft_r2c(rank: ::std::os::raw::c_int,
                                   dims: *const fftwl_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwl_iodim,
                                   in_: *mut f64, out: *mut fftwl_complex,
                                   flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_dft_c2r(rank: ::std::os::raw::c_int,
                                   dims: *const fftwl_iodim,
                                   howmany_rank: ::std::os::raw::c_int,
                                   howmany_dims: *const fftwl_iodim,
                                   in_: *mut fftwl_complex, out: *mut f64,
                                   flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_split_dft_r2c(rank: ::std::os::raw::c_int,
                                         dims: *const fftwl_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwl_iodim,
                                         in_: *mut f64, ro: *mut f64,
                                         io: *mut f64,
                                         flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_split_dft_c2r(rank: ::std::os::raw::c_int,
                                         dims: *const fftwl_iodim,
                                         howmany_rank: ::std::os::raw::c_int,
                                         howmany_dims: *const fftwl_iodim,
                                         ri: *mut f64, ii: *mut f64,
                                         out: *mut f64,
                                         flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_dft_r2c(rank: ::std::os::raw::c_int,
                                     dims: *const fftwl_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwl_iodim64,
                                     in_: *mut f64, out: *mut fftwl_complex,
                                     flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_dft_c2r(rank: ::std::os::raw::c_int,
                                     dims: *const fftwl_iodim64,
                                     howmany_rank: ::std::os::raw::c_int,
                                     howmany_dims: *const fftwl_iodim64,
                                     in_: *mut fftwl_complex, out: *mut f64,
                                     flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_split_dft_r2c(rank: ::std::os::raw::c_int,
                                           dims: *const fftwl_iodim64,
                                           howmany_rank:
                                               ::std::os::raw::c_int,
                                           howmany_dims: *const fftwl_iodim64,
                                           in_: *mut f64, ro: *mut f64,
                                           io: *mut f64,
                                           flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_split_dft_c2r(rank: ::std::os::raw::c_int,
                                           dims: *const fftwl_iodim64,
                                           howmany_rank:
                                               ::std::os::raw::c_int,
                                           howmany_dims: *const fftwl_iodim64,
                                           ri: *mut f64, ii: *mut f64,
                                           out: *mut f64,
                                           flags: ::std::os::raw::c_uint)
     -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_execute_dft_r2c(p: fftwl_plan, in_: *mut f64,
                                 out: *mut fftwl_complex);
}
extern "C" {
    pub fn fftwl_execute_dft_c2r(p: fftwl_plan, in_: *mut fftwl_complex,
                                 out: *mut f64);
}
extern "C" {
    pub fn fftwl_execute_split_dft_r2c(p: fftwl_plan, in_: *mut f64,
                                       ro: *mut f64, io: *mut f64);
}
extern "C" {
    pub fn fftwl_execute_split_dft_c2r(p: fftwl_plan, ri: *mut f64,
                                       ii: *mut f64, out: *mut f64);
}
extern "C" {
    pub fn fftwl_plan_many_r2r(rank: ::std::os::raw::c_int,
                               n: *const ::std::os::raw::c_int,
                               howmany: ::std::os::raw::c_int, in_: *mut f64,
                               inembed: *const ::std::os::raw::c_int,
                               istride: ::std::os::raw::c_int,
                               idist: ::std::os::raw::c_int, out: *mut f64,
                               onembed: *const ::std::os::raw::c_int,
                               ostride: ::std::os::raw::c_int,
                               odist: ::std::os::raw::c_int,
                               kind: *const fftwl_r2r_kind,
                               flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_r2r(rank: ::std::os::raw::c_int,
                          n: *const ::std::os::raw::c_int, in_: *mut f64,
                          out: *mut f64, kind: *const fftwl_r2r_kind,
                          flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_r2r_1d(n: ::std::os::raw::c_int, in_: *mut f64,
                             out: *mut f64, kind: fftwl_r2r_kind,
                             flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_r2r_2d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int, in_: *mut f64,
                             out: *mut f64, kind0: fftwl_r2r_kind,
                             kind1: fftwl_r2r_kind,
                             flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_r2r_3d(n0: ::std::os::raw::c_int,
                             n1: ::std::os::raw::c_int,
                             n2: ::std::os::raw::c_int, in_: *mut f64,
                             out: *mut f64, kind0: fftwl_r2r_kind,
                             kind1: fftwl_r2r_kind, kind2: fftwl_r2r_kind,
                             flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru_r2r(rank: ::std::os::raw::c_int,
                               dims: *const fftwl_iodim,
                               howmany_rank: ::std::os::raw::c_int,
                               howmany_dims: *const fftwl_iodim,
                               in_: *mut f64, out: *mut f64,
                               kind: *const fftwl_r2r_kind,
                               flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_plan_guru64_r2r(rank: ::std::os::raw::c_int,
                                 dims: *const fftwl_iodim64,
                                 howmany_rank: ::std::os::raw::c_int,
                                 howmany_dims: *const fftwl_iodim64,
                                 in_: *mut f64, out: *mut f64,
                                 kind: *const fftwl_r2r_kind,
                                 flags: ::std::os::raw::c_uint) -> fftwl_plan;
}
extern "C" {
    pub fn fftwl_execute_r2r(p: fftwl_plan, in_: *mut f64, out: *mut f64);
}
extern "C" {
    pub fn fftwl_destroy_plan(p: fftwl_plan);
}
extern "C" {
    pub fn fftwl_forget_wisdom();
}
extern "C" {
    pub fn fftwl_cleanup();
}
extern "C" {
    pub fn fftwl_set_timelimit(t: f64);
}
extern "C" {
    pub fn fftwl_plan_with_nthreads(nthreads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fftwl_init_threads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_cleanup_threads();
}
extern "C" {
    pub fn fftwl_make_planner_thread_safe();
}
extern "C" {
    pub fn fftwl_export_wisdom_to_filename(filename:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_export_wisdom_to_file(output_file: *mut FILE);
}
extern "C" {
    pub fn fftwl_export_wisdom_to_string() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fftwl_export_wisdom(write_char: fftwl_write_char_func,
                               data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fftwl_import_system_wisdom() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_import_wisdom_from_filename(filename:
                                                 *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_import_wisdom_from_file(input_file: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_import_wisdom_from_string(input_string:
                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_import_wisdom(read_char: fftwl_read_char_func,
                               data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fftwl_fprint_plan(p: fftwl_plan, output_file: *mut FILE);
}
extern "C" {
    pub fn fftwl_print_plan(p: fftwl_plan);
}
extern "C" {
    pub fn fftwl_sprint_plan(p: fftwl_plan) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fftwl_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fftwl_alloc_real(n: usize) -> *mut f64;
}
extern "C" {
    pub fn fftwl_alloc_complex(n: usize) -> *mut fftwl_complex;
}
extern "C" {
    pub fn fftwl_free(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fftwl_flops(p: fftwl_plan, add: *mut f64, mul: *mut f64,
                       fmas: *mut f64);
}
extern "C" {
    pub fn fftwl_estimate_cost(p: fftwl_plan) -> f64;
}
extern "C" {
    pub fn fftwl_cost(p: fftwl_plan) -> f64;
}
extern "C" {
    pub fn fftwl_alignment_of(p: *mut f64) -> ::std::os::raw::c_int;
}
